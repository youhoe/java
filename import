import java.util.Scanner; public class LCMCalculator {     // Method to calculate the Greatest Common Divisor (GCD)     public static int gcd(int a, int b) {         while (b != 0) {             int temp = b;             b = a % b;             a = temp;         }         return a;     }     // Method to calculate the Least Common Multiple (LCM)     public static int lcm(int a, int b) {         return Math.abs(a * b) / gcd(a, b);     }     public static void main(String[] args) {         Scanner scanner = new Scanner(System.in)         // Input two numbers         System.out.print("Enter the first number: ");         int num1 = scanner.nextInt();         System.out.print("Enter the second number: ");         int num2 = scanner.nextInt();         // Calculate and display the LCM         int result = lcm(num1, num2);         System.out.println("The LCM of " + num1 + " and " + num2 + " is " + result);         scanner.close();     } }  
 Prime no: import java.util.Scanner;  public class PrimeNumbers {      // Method to check if a number is prime     public static boolean isPrime(int num) {         if (num <= 1) {             return false;         }         for (int i = 2; i <= Math.sqrt(num); i++) {             if (num % i == 0) {                 return false;             }         }         return true;     }      public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);          // Input the value of N         System.out.print("Enter the value of N: ");         int N = scanner.nextInt();          // Display prime numbers from 1 to N         System.out.println("Prime numbers from 1 to " + N + " are:");         for (int i = 2; i <= N; i++) {
if (isPrime(i)) {                 System.out.print(i + " ");             }         }          scanner.close();     } }  Bubble sort import java.util.Scanner;  public class BubbleSort {      // Method to perform bubble sort     public static void bubbleSort(int[] arr) {         int n = arr.length;         boolean swapped;          // Outer loop for each pass         for (int i = 0; i < n - 1; i++) {             swapped = false;              // Inner loop for comparing adjacent elements             for (int j = 0; j < n - i - 1; j++) {                 if (arr[j] > arr[j + 1]) {                     // Swap if elements are in the wrong order                     int temp = arr[j];                     arr[j] = arr[j + 1]; 
arr[j + 1] = temp;                      swapped = true;                 }             }              // If no elements were swapped in the inner loop, the array is already sorted             if (!swapped) {                 break;             }         }     }      public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);          // Input array size         System.out.print("Enter the number of elements: ");         int n = scanner.nextInt();          // Input array elements         int[] arr = new int[n];         System.out.println("Enter the elements of the array:");         for (int i = 0; i < n; i++) {             arr[i] = scanner.nextInt();         }          // Perform bubble sort         bubbleSort(arr); 
         // Display sorted array         System.out.println("Sorted array:");         for (int num : arr) {             System.out.print(num + " ");         }          scanner.close();     } }  Linear sort import java.util.Scanner;  public class LinearSearch {      // Method to perform linear search     public static int linearSearch(int[] arr, int key) {         for (int i = 0; i < arr.length; i++) {             if (arr[i] == key) {                 return i; // Return the index of the key if found             }         }         return -1; // Return -1 if the key is not found     }      public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);  
      // Input array size         System.out.print("Enter the number of elements: ");         int n = scanner.nextInt();          // Input array elements         int[] arr = new int[n];         System.out.println("Enter the elements of the array:");         for (int i = 0; i < n; i++) {             arr[i] = scanner.nextInt();         }          // Input the key to be searched         System.out.print("Enter the element to search for: ");         int key = scanner.nextInt();          // Perform linear search         int result = linearSearch(arr, key);          // Display the result         if (result == -1) {             System.out.println("Element " + key + " not found in the array.");         } else {             System.out.println("Element " + key + " found at index " + result + ".");         }          scanner.close();     } } Pascal triangle, right angle triangle 
import java.util.Scanner;  public class PascalTriangle {      // Method to generate Pascal's Triangle     public static void printPascalTriangle(int rows) {         for (int i = 0; i < rows; i++) {             // Print spaces for formatting             for (int j = 0; j < rows - i; j++) {                 System.out.print(" ");             }              // Calculate and print each value in the row             int number = 1;             for (int j = 0; j <= i; j++) {                 System.out.print(number + " ");                 number = number * (i - j) / (j + 1);  // Update the number for next position             }              System.out.println();         }     }      public static void main(String[] args) {         Scanner scanner = new Scanner(System.in);          // Input the number of rows 
System.out.print("Enter the number of rows for Pascal's Triangle: "); int rows = scanner.nextInt(); // Print Pascal's Triangle printPascalTriangle(rows); scanner.close(); } } 